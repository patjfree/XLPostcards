import { View, Text, TextInput, TouchableOpacity, StyleSheet, Modal, Platform, Alert, Linking } from 'react-native';
import React, { useState } from 'react';

/**
 * AIDisclaimer Component
 * 
 * A reusable component that displays a disclaimer about AI-generated content and provides 
 * functionality for users to report inappropriate content.
 * 
 * Usage:
 * ```tsx
 * // Basic usage with no content to report
 * <AIDisclaimer />
 * 
 * // Usage with content to report (recommended)
 * <AIDisclaimer contentToReport={generatedContent} />
 * ```
 * 
 * Props:
 * - contentToReport?: string
 *   The AI-generated content that should be included in the report when a user submits one.
 *   This could be any text content that was generated by AI, such as:
 *   - Generated descriptions or summaries
 *   - AI responses or recommendations
 *   - Any other AI-generated text that users might need to report
 * 
 *   Example:
 *   ```tsx
 *   // In a component where you have AI-generated content:
 *   const [aiGeneratedText, setAiGeneratedText] = useState('');
 *   
 *   // Later in your JSX:
 *   <AIDisclaimer contentToReport={aiGeneratedText} />
 *   ```
 * 
 * The component will:
 * 1. Display a standard AI disclaimer
 * 2. Provide a "Report" link
 * 3. Show a modal form when report is clicked
 * 4. Handle the submission of the report including the provided content
 */

type ReportFormData = {
  name: string;
  email: string;
  comments: string;
};

interface AIDisclaimerProps {
  contentToReport?: string;
  onSubmitSuccess?: () => void;
  defaultComments?: string;
}

export default function AIDisclaimer({ contentToReport, onSubmitSuccess, defaultComments }: AIDisclaimerProps) {
  const [isReportModalVisible, setIsReportModalVisible] = useState(false);
  const [reportForm, setReportForm] = useState<ReportFormData>({
    name: '',
    email: '',
    comments: defaultComments || ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitError, setSubmitError] = useState<string | null>(null);

  const validateEmail = (email: string): boolean => {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  };

  const handleReportSubmit = async () => {
    if (!reportForm.name.trim()) {
      setSubmitError('Name is required');
      return;
    }
    if (!validateEmail(reportForm.email)) {
      setSubmitError('Please enter a valid email address');
      return;
    }

    setIsSubmitting(true);
    setSubmitError(null);

    try {
      const formData = new URLSearchParams();
      formData.append('Name', reportForm.name);
      formData.append('Email', reportForm.email);
      formData.append('Comments', reportForm.comments || '');
      formData.append('Payload', contentToReport || '');

      console.debug('Submitting data:', Object.fromEntries(formData));

      const response = await fetch('https://script.google.com/macros/s/AKfycbwgPQTnYaApkceJFVOXh4bru-kT392o1RiDYJc4cp4_9UB9zANAX-XsfDXotu-JFwvJsg/exec', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: formData.toString(),
        mode: 'no-cors'
      });

      setReportForm({ name: '', email: '', comments: '' });
      setIsReportModalVisible(false);
      Alert.alert('Submitted', 'We will review the report and take the appropriate action. Thank you for your feedback.');

      if (onSubmitSuccess) {
        onSubmitSuccess();
      }

      try {
        console.debug('Report submitted successfully');
      } catch (error) {
        console.warn('Failed to track report submission:', error);
      }

    } catch (error) {
      console.error('Report submission error:', error);
      setSubmitError('Failed to submit report. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleCancelReport = () => {
    setReportForm({ name: '', email: '', comments: '' });
    setSubmitError(null);
    setIsReportModalVisible(false);
  };

  return (
    <>
      <Text style={styles.disclaimer}>
        {contentToReport ? (
          <>
            This application utilizes generative AI technology from OpenAI, which may produce inaccurate or misleading information. Please use caution and verify any information obtained.{' '}
            <Text 
              style={styles.reportLink}
              onPress={() => setIsReportModalVisible(true)}
            >
              Report
            </Text>
            {' '}inappropriate content.{'\n\n'}
          </>
        ) : null}
        <Text
          style={styles.reportLink}
          onPress={() => Linking.openURL('https://citywalkabout.ai/privacy')}
        >
          Privacy Policy
        </Text>
      </Text>

      <Modal
        visible={isReportModalVisible}
        transparent={true}
        animationType="slide"
      >
        <View style={styles.modalOverlay}>
          <View style={styles.reportModalContent}>
            <Text style={styles.reportModalTitle}>Report Inappropriate Content</Text>
            
            <Text style={styles.reportModalText}>
              Please provide some information so that we can contact you regarding the resolution of this report.
            </Text>

            <TextInput
              style={styles.reportInput}
              placeholder="Name *"
              placeholderTextColor="#999"
              value={reportForm.name}
              onChangeText={(text) => setReportForm(prev => ({ ...prev, name: text }))}
            />

            <TextInput
              style={styles.reportInput}
              placeholder="Email *"
              placeholderTextColor="#999"
              value={reportForm.email}
              onChangeText={(text) => setReportForm(prev => ({ ...prev, email: text }))}
              keyboardType="email-address"
              autoCapitalize="none"
            />

            <TextInput
              style={[styles.reportInput, styles.reportTextArea]}
              placeholder="Comments (optional)"
              placeholderTextColor="#999"
              value={reportForm.comments}
              onChangeText={(text) => setReportForm(prev => ({ ...prev, comments: text }))}
              multiline
              numberOfLines={4}
            />

            <Text style={styles.reportModalText}>
              We have also captured the content of your AI generated content and will submit it with your report. 
            </Text>

            {submitError && (
              <Text style={styles.reportErrorText}>{submitError}</Text>
            )}

            <View style={styles.reportButtonContainer}>
              <TouchableOpacity
                style={[styles.reportButton, styles.reportCancelButton]}
                onPress={handleCancelReport}
                disabled={isSubmitting}
              >
                <Text style={styles.reportButtonText}>Cancel</Text>
              </TouchableOpacity>

              <TouchableOpacity
                style={[styles.reportButton, styles.reportSubmitButton]}
                onPress={handleReportSubmit}
                disabled={isSubmitting}
              >
                <Text style={styles.reportButtonText}>
                  {isSubmitting ? 'Submitting...' : 'Submit'}
                </Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>
    </>
  );
}

const styles = StyleSheet.create({
  disclaimer: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
    marginTop: 24,
    textAlign: 'center',
  },
  reportLink: {
    color: '#0a7ea4',
    textDecorationLine: 'underline',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    padding: 16,
  },
  reportModalContent: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 20,
    maxHeight: '80%',
  },
  reportModalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 16,
    textAlign: 'center',
  },
  reportModalText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 16,
    lineHeight: 20,
  },
  reportInput: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 12,
    marginBottom: 16,
    fontSize: 16,
    color: '#000',
  },
  reportTextArea: {
    height: 100,
    textAlignVertical: 'top',
  },
  reportErrorText: {
    color: '#dc3545',
    marginBottom: 16,
    textAlign: 'center',
  },
  reportButtonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 16,
  },
  reportButton: {
    flex: 1,
    padding: 16,
    borderRadius: 8,
    alignItems: 'center',
  },
  reportCancelButton: {
    backgroundColor: '#666',
  },
  reportSubmitButton: {
    backgroundColor: '#0a7ea4',
  },
  reportButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
}); 